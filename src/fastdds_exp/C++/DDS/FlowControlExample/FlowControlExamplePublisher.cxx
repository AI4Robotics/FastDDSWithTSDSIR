// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*************************************************************************
 * @file FlowControlExamplePublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastdds/dds/domain/DomainParticipantFactory.hpp>

#include "FlowControlExamplePublisher.h"

using namespace eprosima::fastdds::dds;
using namespace eprosima::fastrtps::rtps;

FlowControlExamplePublisher::FlowControlExamplePublisher()
    : participant_(nullptr)
    , a_publisher_(nullptr)
    , c_publisher_(nullptr)
    , topic_(nullptr)
    , a_writer_(nullptr)
    , c_writer_(nullptr)
    , myType(new FlowControlExamplePubSubType())
{
}

FlowControlExamplePublisher::~FlowControlExamplePublisher()
{
    if (a_writer_ != nullptr)
    {
        a_publisher_->delete_datawriter(a_writer_);
    }
    if (c_writer_ != nullptr)
    {
        c_publisher_->delete_datawriter(c_writer_);
    }
    if (a_publisher_ != nullptr)
    {
        participant_->delete_publisher(a_publisher_);
    }
    if (c_publisher_ != nullptr)
    {
        participant_->delete_publisher(c_publisher_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool FlowControlExamplePublisher::init()
{
    ///////////////////////////////////////////////////////////////////////////
    // Limit to 300kb per second.
    static const char* flow_controller_name = "example_flow_controller";
    auto flow_control_300k_per_sec = std::make_shared<eprosima::fastdds::rtps::FlowControllerDescriptor>();
    flow_control_300k_per_sec->name = flow_controller_name;
    flow_control_300k_per_sec->scheduler = eprosima::fastdds::rtps::FlowControllerSchedulerPolicy::HIGH_PRIORITY;
    // flow_control_300k_per_sec->scheduler = eprosima::fastdds::rtps::FlowControllerSchedulerPolicy::FIFO;
    // flow_control_300k_per_sec->scheduler = eprosima::fastdds::rtps::FlowControllerSchedulerPolicy::ROUND_ROBIN;
    // flow_control_300k_per_sec->max_bytes_per_period = 300 * 1000;
    // flow_control_300k_per_sec->max_bytes_per_period = 50 * 1000 * 1000;
    // flow_control_300k_per_sec->period_ms = 1000;
    ///////////////////////////////////////////////////////////////////////////

    // Create Participant
    DomainParticipantQos pqos;
    pqos.wire_protocol().builtin.discovery_config.leaseDuration = eprosima::fastrtps::c_TimeInfinite;
    pqos.flow_controllers().push_back(flow_control_300k_per_sec);   // Register flow controller on participant
    pqos.name("Participant_publisher");  //You can put here the name you want

    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    if (participant_ == nullptr)
    {
        return false;
    }
    //Register the type
    myType.register_type(participant_);

    a_publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT);
    if (a_publisher_ == nullptr)
    {
        return false;
    }

    // Create Topic
    topic_ = participant_->create_topic("FlowControlExamplePubSubTopic", myType.get_type_name(), TOPIC_QOS_DEFAULT);
    if (topic_ == nullptr)
    {
        return false;
    }

    DataWriterQos waqos;
    waqos.publish_mode().kind = ASYNCHRONOUS_PUBLISH_MODE;
    waqos.publish_mode().flow_controller_name = flow_controller_name; // Link writer to the registered flow controller.
    waqos.reliability().kind = BEST_EFFORT_RELIABILITY_QOS;
    // waqos.history().depth = 10;
    Property aproperty;
    aproperty.name("fastdds.sfc.priority");
    aproperty.value("6");
    waqos.properties().properties().emplace_back(aproperty);
    waqos.data_sharing().off();
    a_writer_ = a_publisher_->create_datawriter(topic_, waqos, &m_listener);
    if (a_writer_ == nullptr)
    {
        return false;
    }
    std::cout << "a# publisher created, waiting for Subb_cribers..." << std::endl;


    b_publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT);
    if (b_publisher_ == nullptr)
    {
        return false;
    }

    DataWriterQos wbqos;
    wbqos.publish_mode().kind = ASYNCHRONOUS_PUBLISH_MODE;
    wbqos.publish_mode().flow_controller_name = flow_controller_name; // Link writer to the registered flow controller.
    wbqos.reliability().kind = BEST_EFFORT_RELIABILITY_QOS;
    // wbqos.history().depth = 10;
    Property bproperty;
    bproperty.name("fastdds.sfc.priority");
    bproperty.value("4");
    wbqos.properties().properties().emplace_back(bproperty);
    wbqos.data_sharing().off();
    b_writer_ = b_publisher_->create_datawriter(topic_, wbqos, &m_listener);
    if (b_writer_ == nullptr)
    {
        return false;
    }
    std::cout << "b# publisher created, waiting for Subb_cribers..." << std::endl;


    c_publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT);
    if (c_publisher_ == nullptr)
    {
        return false;
    }

    DataWriterQos wcqos;
    wcqos.publish_mode().kind = ASYNCHRONOUS_PUBLISH_MODE;
    wcqos.publish_mode().flow_controller_name = flow_controller_name;
    wcqos.reliability().kind = BEST_EFFORT_RELIABILITY_QOS;
    // wcqos.history().depth = 10;
    Property cproperty;
    cproperty.name("fastdds.sfc.priority");
    cproperty.value("2");
    wcqos.properties().properties().emplace_back(cproperty);
    wcqos.data_sharing().off();
    c_writer_ = c_publisher_->create_datawriter(topic_, wcqos, &m_listener);
    if (c_writer_ == nullptr)
    {
        return false;
    }
    std::cout << "c# publisher created, waiting for Subb_cribers..." << std::endl;


    d_publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT);
    if (d_publisher_ == nullptr)
    {
        return false;
    }

    DataWriterQos wdqos;
    wdqos.publish_mode().kind = ASYNCHRONOUS_PUBLISH_MODE;
    wdqos.publish_mode().flow_controller_name = flow_controller_name;
    wdqos.reliability().kind = BEST_EFFORT_RELIABILITY_QOS;
    // wdqos.history().depth = 10;
    Property dproperty;
    dproperty.name("fastdds.sfc.priority");
    dproperty.value("0");
    wdqos.properties().properties().emplace_back(dproperty);
    wdqos.data_sharing().off();
    d_writer_ = d_publisher_->create_datawriter(topic_, wdqos, &m_listener);
    if (d_writer_ == nullptr)
    {
        return false;
    }
    std::cout << "d# publisher created, waiting for Subb_cribers..." << std::endl;

    return true;
}

void FlowControlExamplePublisher::PubListener::on_publication_matched(
        eprosima::fastdds::dds::DataWriter*,
        const eprosima::fastdds::dds::PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        n_matched = info.total_count;
        std::cout << "Publisher matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        n_matched = info.total_count;
        std::cout << "Publisher unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void FlowControlExamplePublisher::run()
{
    while (m_listener.n_matched == 0)
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(250));
    }

    // Publication code
    // FlowControlExample st;

    /* Initialize your structure here */
    int msgsent_a = 0;
    int msgsent_b = 0;
    int msgsent_c = 0;
    int msgsent_d = 0;
    char ch;
    std::cout << "Flow Control example...." << std::endl;
    std::cout << "Press \"f\" to send a sample through the fast writer, which has unlimited bandwidth" << std::endl;
    std::cout <<
        "Press \"s\" to send a sample through the slow writer, which is also limited by its own Flow Controller" <<
        std::endl;
    std::cout << "Press \"q\" quit" << std::endl;
    char a_c = 'A', b_c = 'a', c_c = '0', d_c = '!'; // 数据包序号，将该序号添加到传输数据的message字段中
    /*
        eProsima_user_DllExport void message(const std::array<char, 600000>& _message);
        eProsima_user_DllExport void message(std::array<char, 600000>&& _message);
    */
    ch = 's';
    // while (std::cin >> ch)
    while (true)
    {

        if (a_c > 'Z') a_c = 'A';
        if (b_c > 'z') b_c = 'a';
        if (c_c > '9') c_c = '0';
        if (d_c > '/') d_c = '!';
        {
            FlowControlExample st;
            std::array<char, 600000> msg;       
            msg[0] = a_c;
            st.message(msg);
            st.wasFast(true);
            a_writer_->write(&st);  ++msgsent_a;
            std::cout << "Sending sample, count=" << msgsent_a <<
                " through the fast writer. Send another sample? (f-fast,s-slow,q-quit): " << std::endl;
            a_c++;
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(1000));
        {
            FlowControlExample st;
            std::array<char, 600000> msg;       
            msg[0] = b_c;
            st.message(msg);
            st.wasFast(false);
            b_writer_->write(&st);  ++msgsent_b;
            std::cout << "Sending sample, count=" << msgsent_b <<
                " through the slow writer. Send another sample? (f-fast,s-slow,q-quit): " << std::endl;
            b_c++;
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(1000));
        // {
        //     FlowControlExample st;
        //     std::array<char, 600000> msg;       
        //     msg[0] = c_c;
        //     st.message(msg);
        //     st.wasFast(true);
        //     c_writer_->write(&st);  ++msgsent_c;
        //     std::cout << "Sending sample, count=" << msgsent_c <<
        //         " through the slow writer. Send another sample? (f-fast,s-slow,q-quit): " << std::endl;
        //     c_c++;
        // }
        // std::this_thread::sleep_for(std::chrono::milliseconds(100));
        // {
        //     FlowControlExample st;
        //     std::array<char, 600000> msg;       
        //     msg[0] = d_c;
        //     st.message(msg);
        //     st.wasFast(true);
        //     d_writer_->write(&st);  ++msgsent_d;
        //     std::cout << "Sending sample, count=" << msgsent_d <<
        //         " through the slow writer. Send another sample? (f-fast,s-slow,q-quit): " << std::endl;
        //     d_c++;
        // }

        // std::cout << "...................等待100ms..................." << std::endl;
        // std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}
