// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MixedMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MixedMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

MixedMsg::MixedMsg()
{
    // m_msg_priority com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7276c8cd
    m_msg_priority = 0;
    // m_msg_sequence_num com.eprosima.idl.parser.typecode.PrimitiveTypeCode@544a2ea6
    m_msg_sequence_num = 0;
    // m_msg_type com.eprosima.idl.parser.typecode.StringTypeCode@2e3fc542
    m_msg_type ="";
    // m_msg_start_seconds com.eprosima.idl.parser.typecode.PrimitiveTypeCode@150c158
    m_msg_start_seconds = 0;
    // m_msg_start_nanosec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4524411f
    m_msg_start_nanosec = 0;
    // m_msg_end_seconds com.eprosima.idl.parser.typecode.PrimitiveTypeCode@401e7803
    m_msg_end_seconds = 0;
    // m_msg_end_nanosec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@704d6e83
    m_msg_end_nanosec = 0;
    // m_msg_trans_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43a0cee9
    m_msg_trans_time = 0;
    // m_is_overtime com.eprosima.idl.parser.typecode.PrimitiveTypeCode@eb21112
    m_is_overtime = false;
    // m_message com.eprosima.idl.parser.typecode.ArrayTypeCode@706a04ae
    memset(&m_message, 0, (300) * 1);

}

MixedMsg::~MixedMsg()
{










}

MixedMsg::MixedMsg(
        const MixedMsg& x)
{
    m_msg_priority = x.m_msg_priority;
    m_msg_sequence_num = x.m_msg_sequence_num;
    m_msg_type = x.m_msg_type;
    m_msg_start_seconds = x.m_msg_start_seconds;
    m_msg_start_nanosec = x.m_msg_start_nanosec;
    m_msg_end_seconds = x.m_msg_end_seconds;
    m_msg_end_nanosec = x.m_msg_end_nanosec;
    m_msg_trans_time = x.m_msg_trans_time;
    m_is_overtime = x.m_is_overtime;
    m_message = x.m_message;
}

MixedMsg::MixedMsg(
        MixedMsg&& x)
{
    m_msg_priority = x.m_msg_priority;
    m_msg_sequence_num = x.m_msg_sequence_num;
    m_msg_type = std::move(x.m_msg_type);
    m_msg_start_seconds = x.m_msg_start_seconds;
    m_msg_start_nanosec = x.m_msg_start_nanosec;
    m_msg_end_seconds = x.m_msg_end_seconds;
    m_msg_end_nanosec = x.m_msg_end_nanosec;
    m_msg_trans_time = x.m_msg_trans_time;
    m_is_overtime = x.m_is_overtime;
    m_message = std::move(x.m_message);
}

MixedMsg& MixedMsg::operator =(
        const MixedMsg& x)
{

    m_msg_priority = x.m_msg_priority;
    m_msg_sequence_num = x.m_msg_sequence_num;
    m_msg_type = x.m_msg_type;
    m_msg_start_seconds = x.m_msg_start_seconds;
    m_msg_start_nanosec = x.m_msg_start_nanosec;
    m_msg_end_seconds = x.m_msg_end_seconds;
    m_msg_end_nanosec = x.m_msg_end_nanosec;
    m_msg_trans_time = x.m_msg_trans_time;
    m_is_overtime = x.m_is_overtime;
    m_message = x.m_message;

    return *this;
}

MixedMsg& MixedMsg::operator =(
        MixedMsg&& x)
{

    m_msg_priority = x.m_msg_priority;
    m_msg_sequence_num = x.m_msg_sequence_num;
    m_msg_type = std::move(x.m_msg_type);
    m_msg_start_seconds = x.m_msg_start_seconds;
    m_msg_start_nanosec = x.m_msg_start_nanosec;
    m_msg_end_seconds = x.m_msg_end_seconds;
    m_msg_end_nanosec = x.m_msg_end_nanosec;
    m_msg_trans_time = x.m_msg_trans_time;
    m_is_overtime = x.m_is_overtime;
    m_message = std::move(x.m_message);

    return *this;
}

bool MixedMsg::operator ==(
        const MixedMsg& x) const
{

    return (m_msg_priority == x.m_msg_priority && m_msg_sequence_num == x.m_msg_sequence_num && m_msg_type == x.m_msg_type && m_msg_start_seconds == x.m_msg_start_seconds && m_msg_start_nanosec == x.m_msg_start_nanosec && m_msg_end_seconds == x.m_msg_end_seconds && m_msg_end_nanosec == x.m_msg_end_nanosec && m_msg_trans_time == x.m_msg_trans_time && m_is_overtime == x.m_is_overtime && m_message == x.m_message);
}

bool MixedMsg::operator !=(
        const MixedMsg& x) const
{
    return !(*this == x);
}

size_t MixedMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((300) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t MixedMsg::getCdrSerializedSize(
        const MixedMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.msg_type().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    if ((300) > 0)
    {
        current_alignment += ((300) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    return current_alignment - initial_alignment;
}

void MixedMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_msg_priority;
    scdr << m_msg_sequence_num;
    scdr << m_msg_type;
    scdr << m_msg_start_seconds;
    scdr << m_msg_start_nanosec;
    scdr << m_msg_end_seconds;
    scdr << m_msg_end_nanosec;
    scdr << m_msg_trans_time;
    scdr << m_is_overtime;
    scdr << m_message;


}

void MixedMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_msg_priority;
    dcdr >> m_msg_sequence_num;
    dcdr >> m_msg_type;
    dcdr >> m_msg_start_seconds;
    dcdr >> m_msg_start_nanosec;
    dcdr >> m_msg_end_seconds;
    dcdr >> m_msg_end_nanosec;
    dcdr >> m_msg_trans_time;
    dcdr >> m_is_overtime;
    dcdr >> m_message;

}

/*!
 * @brief This function sets a value in member msg_priority
 * @param _msg_priority New value for member msg_priority
 */
void MixedMsg::msg_priority(
        int16_t _msg_priority)
{
    m_msg_priority = _msg_priority;
}

/*!
 * @brief This function returns the value of member msg_priority
 * @return Value of member msg_priority
 */
int16_t MixedMsg::msg_priority() const
{
    return m_msg_priority;
}

/*!
 * @brief This function returns a reference to member msg_priority
 * @return Reference to member msg_priority
 */
int16_t& MixedMsg::msg_priority()
{
    return m_msg_priority;
}

/*!
 * @brief This function sets a value in member msg_sequence_num
 * @param _msg_sequence_num New value for member msg_sequence_num
 */
void MixedMsg::msg_sequence_num(
        uint64_t _msg_sequence_num)
{
    m_msg_sequence_num = _msg_sequence_num;
}

/*!
 * @brief This function returns the value of member msg_sequence_num
 * @return Value of member msg_sequence_num
 */
uint64_t MixedMsg::msg_sequence_num() const
{
    return m_msg_sequence_num;
}

/*!
 * @brief This function returns a reference to member msg_sequence_num
 * @return Reference to member msg_sequence_num
 */
uint64_t& MixedMsg::msg_sequence_num()
{
    return m_msg_sequence_num;
}

/*!
 * @brief This function copies the value in member msg_type
 * @param _msg_type New value to be copied in member msg_type
 */
void MixedMsg::msg_type(
        const std::string& _msg_type)
{
    m_msg_type = _msg_type;
}

/*!
 * @brief This function moves the value in member msg_type
 * @param _msg_type New value to be moved in member msg_type
 */
void MixedMsg::msg_type(
        std::string&& _msg_type)
{
    m_msg_type = std::move(_msg_type);
}

/*!
 * @brief This function returns a constant reference to member msg_type
 * @return Constant reference to member msg_type
 */
const std::string& MixedMsg::msg_type() const
{
    return m_msg_type;
}

/*!
 * @brief This function returns a reference to member msg_type
 * @return Reference to member msg_type
 */
std::string& MixedMsg::msg_type()
{
    return m_msg_type;
}
/*!
 * @brief This function sets a value in member msg_start_seconds
 * @param _msg_start_seconds New value for member msg_start_seconds
 */
void MixedMsg::msg_start_seconds(
        int32_t _msg_start_seconds)
{
    m_msg_start_seconds = _msg_start_seconds;
}

/*!
 * @brief This function returns the value of member msg_start_seconds
 * @return Value of member msg_start_seconds
 */
int32_t MixedMsg::msg_start_seconds() const
{
    return m_msg_start_seconds;
}

/*!
 * @brief This function returns a reference to member msg_start_seconds
 * @return Reference to member msg_start_seconds
 */
int32_t& MixedMsg::msg_start_seconds()
{
    return m_msg_start_seconds;
}

/*!
 * @brief This function sets a value in member msg_start_nanosec
 * @param _msg_start_nanosec New value for member msg_start_nanosec
 */
void MixedMsg::msg_start_nanosec(
        uint32_t _msg_start_nanosec)
{
    m_msg_start_nanosec = _msg_start_nanosec;
}

/*!
 * @brief This function returns the value of member msg_start_nanosec
 * @return Value of member msg_start_nanosec
 */
uint32_t MixedMsg::msg_start_nanosec() const
{
    return m_msg_start_nanosec;
}

/*!
 * @brief This function returns a reference to member msg_start_nanosec
 * @return Reference to member msg_start_nanosec
 */
uint32_t& MixedMsg::msg_start_nanosec()
{
    return m_msg_start_nanosec;
}

/*!
 * @brief This function sets a value in member msg_end_seconds
 * @param _msg_end_seconds New value for member msg_end_seconds
 */
void MixedMsg::msg_end_seconds(
        int32_t _msg_end_seconds)
{
    m_msg_end_seconds = _msg_end_seconds;
}

/*!
 * @brief This function returns the value of member msg_end_seconds
 * @return Value of member msg_end_seconds
 */
int32_t MixedMsg::msg_end_seconds() const
{
    return m_msg_end_seconds;
}

/*!
 * @brief This function returns a reference to member msg_end_seconds
 * @return Reference to member msg_end_seconds
 */
int32_t& MixedMsg::msg_end_seconds()
{
    return m_msg_end_seconds;
}

/*!
 * @brief This function sets a value in member msg_end_nanosec
 * @param _msg_end_nanosec New value for member msg_end_nanosec
 */
void MixedMsg::msg_end_nanosec(
        uint32_t _msg_end_nanosec)
{
    m_msg_end_nanosec = _msg_end_nanosec;
}

/*!
 * @brief This function returns the value of member msg_end_nanosec
 * @return Value of member msg_end_nanosec
 */
uint32_t MixedMsg::msg_end_nanosec() const
{
    return m_msg_end_nanosec;
}

/*!
 * @brief This function returns a reference to member msg_end_nanosec
 * @return Reference to member msg_end_nanosec
 */
uint32_t& MixedMsg::msg_end_nanosec()
{
    return m_msg_end_nanosec;
}

/*!
 * @brief This function sets a value in member msg_trans_time
 * @param _msg_trans_time New value for member msg_trans_time
 */
void MixedMsg::msg_trans_time(
        int32_t _msg_trans_time)
{
    m_msg_trans_time = _msg_trans_time;
}

/*!
 * @brief This function returns the value of member msg_trans_time
 * @return Value of member msg_trans_time
 */
int32_t MixedMsg::msg_trans_time() const
{
    return m_msg_trans_time;
}

/*!
 * @brief This function returns a reference to member msg_trans_time
 * @return Reference to member msg_trans_time
 */
int32_t& MixedMsg::msg_trans_time()
{
    return m_msg_trans_time;
}

/*!
 * @brief This function sets a value in member is_overtime
 * @param _is_overtime New value for member is_overtime
 */
void MixedMsg::is_overtime(
        bool _is_overtime)
{
    m_is_overtime = _is_overtime;
}

/*!
 * @brief This function returns the value of member is_overtime
 * @return Value of member is_overtime
 */
bool MixedMsg::is_overtime() const
{
    return m_is_overtime;
}

/*!
 * @brief This function returns a reference to member is_overtime
 * @return Reference to member is_overtime
 */
bool& MixedMsg::is_overtime()
{
    return m_is_overtime;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void MixedMsg::message(
        const std::array<char, 300>& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void MixedMsg::message(
        std::array<char, 300>&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::array<char, 300>& MixedMsg::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::array<char, 300>& MixedMsg::message()
{
    return m_message;
}

size_t MixedMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;













    return current_align;
}

bool MixedMsg::isKeyDefined()
{
    return false;
}

void MixedMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
              
}
