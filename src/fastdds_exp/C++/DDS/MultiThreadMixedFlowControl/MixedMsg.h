// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MixedMsg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_MIXEDMSG_H_
#define _FAST_DDS_GENERATED_MIXEDMSG_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MixedMsg_SOURCE)
#define MixedMsg_DllAPI __declspec( dllexport )
#else
#define MixedMsg_DllAPI __declspec( dllimport )
#endif // MixedMsg_SOURCE
#else
#define MixedMsg_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MixedMsg_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure MixedMsg defined by the user in the IDL file.
 * @ingroup MIXEDMSG
 */
class MixedMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MixedMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MixedMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MixedMsg that will be copied.
     */
    eProsima_user_DllExport MixedMsg(
            const MixedMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MixedMsg that will be copied.
     */
    eProsima_user_DllExport MixedMsg(
            MixedMsg&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MixedMsg that will be copied.
     */
    eProsima_user_DllExport MixedMsg& operator =(
            const MixedMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MixedMsg that will be copied.
     */
    eProsima_user_DllExport MixedMsg& operator =(
            MixedMsg&& x);

    /*!
     * @brief Comparison operator.
     * @param x MixedMsg object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MixedMsg& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MixedMsg object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MixedMsg& x) const;

    /*!
     * @brief This function sets a value in member msg_priority
     * @param _msg_priority New value for member msg_priority
     */
    eProsima_user_DllExport void msg_priority(
            int16_t _msg_priority);

    /*!
     * @brief This function returns the value of member msg_priority
     * @return Value of member msg_priority
     */
    eProsima_user_DllExport int16_t msg_priority() const;

    /*!
     * @brief This function returns a reference to member msg_priority
     * @return Reference to member msg_priority
     */
    eProsima_user_DllExport int16_t& msg_priority();

    /*!
     * @brief This function sets a value in member msg_sequence_num
     * @param _msg_sequence_num New value for member msg_sequence_num
     */
    eProsima_user_DllExport void msg_sequence_num(
            uint64_t _msg_sequence_num);

    /*!
     * @brief This function returns the value of member msg_sequence_num
     * @return Value of member msg_sequence_num
     */
    eProsima_user_DllExport uint64_t msg_sequence_num() const;

    /*!
     * @brief This function returns a reference to member msg_sequence_num
     * @return Reference to member msg_sequence_num
     */
    eProsima_user_DllExport uint64_t& msg_sequence_num();

    /*!
     * @brief This function copies the value in member msg_type
     * @param _msg_type New value to be copied in member msg_type
     */
    eProsima_user_DllExport void msg_type(
            const std::string& _msg_type);

    /*!
     * @brief This function moves the value in member msg_type
     * @param _msg_type New value to be moved in member msg_type
     */
    eProsima_user_DllExport void msg_type(
            std::string&& _msg_type);

    /*!
     * @brief This function returns a constant reference to member msg_type
     * @return Constant reference to member msg_type
     */
    eProsima_user_DllExport const std::string& msg_type() const;

    /*!
     * @brief This function returns a reference to member msg_type
     * @return Reference to member msg_type
     */
    eProsima_user_DllExport std::string& msg_type();
    /*!
     * @brief This function sets a value in member msg_start_seconds
     * @param _msg_start_seconds New value for member msg_start_seconds
     */
    eProsima_user_DllExport void msg_start_seconds(
            int32_t _msg_start_seconds);

    /*!
     * @brief This function returns the value of member msg_start_seconds
     * @return Value of member msg_start_seconds
     */
    eProsima_user_DllExport int32_t msg_start_seconds() const;

    /*!
     * @brief This function returns a reference to member msg_start_seconds
     * @return Reference to member msg_start_seconds
     */
    eProsima_user_DllExport int32_t& msg_start_seconds();

    /*!
     * @brief This function sets a value in member msg_start_nanosec
     * @param _msg_start_nanosec New value for member msg_start_nanosec
     */
    eProsima_user_DllExport void msg_start_nanosec(
            uint32_t _msg_start_nanosec);

    /*!
     * @brief This function returns the value of member msg_start_nanosec
     * @return Value of member msg_start_nanosec
     */
    eProsima_user_DllExport uint32_t msg_start_nanosec() const;

    /*!
     * @brief This function returns a reference to member msg_start_nanosec
     * @return Reference to member msg_start_nanosec
     */
    eProsima_user_DllExport uint32_t& msg_start_nanosec();

    /*!
     * @brief This function sets a value in member msg_end_seconds
     * @param _msg_end_seconds New value for member msg_end_seconds
     */
    eProsima_user_DllExport void msg_end_seconds(
            int32_t _msg_end_seconds);

    /*!
     * @brief This function returns the value of member msg_end_seconds
     * @return Value of member msg_end_seconds
     */
    eProsima_user_DllExport int32_t msg_end_seconds() const;

    /*!
     * @brief This function returns a reference to member msg_end_seconds
     * @return Reference to member msg_end_seconds
     */
    eProsima_user_DllExport int32_t& msg_end_seconds();

    /*!
     * @brief This function sets a value in member msg_end_nanosec
     * @param _msg_end_nanosec New value for member msg_end_nanosec
     */
    eProsima_user_DllExport void msg_end_nanosec(
            uint32_t _msg_end_nanosec);

    /*!
     * @brief This function returns the value of member msg_end_nanosec
     * @return Value of member msg_end_nanosec
     */
    eProsima_user_DllExport uint32_t msg_end_nanosec() const;

    /*!
     * @brief This function returns a reference to member msg_end_nanosec
     * @return Reference to member msg_end_nanosec
     */
    eProsima_user_DllExport uint32_t& msg_end_nanosec();

    /*!
     * @brief This function sets a value in member msg_trans_time
     * @param _msg_trans_time New value for member msg_trans_time
     */
    eProsima_user_DllExport void msg_trans_time(
            int32_t _msg_trans_time);

    /*!
     * @brief This function returns the value of member msg_trans_time
     * @return Value of member msg_trans_time
     */
    eProsima_user_DllExport int32_t msg_trans_time() const;

    /*!
     * @brief This function returns a reference to member msg_trans_time
     * @return Reference to member msg_trans_time
     */
    eProsima_user_DllExport int32_t& msg_trans_time();

    /*!
     * @brief This function sets a value in member is_overtime
     * @param _is_overtime New value for member is_overtime
     */
    eProsima_user_DllExport void is_overtime(
            bool _is_overtime);

    /*!
     * @brief This function returns the value of member is_overtime
     * @return Value of member is_overtime
     */
    eProsima_user_DllExport bool is_overtime() const;

    /*!
     * @brief This function returns a reference to member is_overtime
     * @return Reference to member is_overtime
     */
    eProsima_user_DllExport bool& is_overtime();

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::array<char, 300>& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::array<char, 300>&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::array<char, 300>& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::array<char, 300>& message();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MixedMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_msg_priority;
    uint64_t m_msg_sequence_num;
    std::string m_msg_type;
    int32_t m_msg_start_seconds;
    uint32_t m_msg_start_nanosec;
    int32_t m_msg_end_seconds;
    uint32_t m_msg_end_nanosec;
    int32_t m_msg_trans_time;
    bool m_is_overtime;
    std::array<char, 300> m_message;
};

#endif // _FAST_DDS_GENERATED_MIXEDMSG_H_